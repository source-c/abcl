
This file describes the goals and current status of the
branch it pertains to. In this case the generic-class-file branch.


Goal(s)
=======

The goal of the branch is to replace the existing class file writer which
is restricted to writing 2 methods in a class file with an extremely
restricted set of signatures.

The new writer will allow any number of methods with no limitation on the
signatures to be used. This allows a number of things impossible today:

 1. Eliminating the external dependency of 'runtime-class.lisp' on ASM
 2. Moving initialization of 'final static' fields to the '<clinit>'
      to make 100% sure they get initialized exactly once
 3. Using the Java-paradigm of having multiple methods with different
      numbers of parameters to fill in default values

--------------- example to go with item (3)
final public LispObject execute() {
  return execute(<default value>);
}

final public LispObject execute(LispObject arg1) {
  return execute(arg1, <default value>);
}

final public LispObject execute(LispObject arg1, LispObject arg2) {
  ...  do actual work ...;
}
--------------- end of example



Design
======

The code uses structures and structure inclusion for the class file and
class file attributes. Each attribute type has an associated specific
finalizer and writer function. This should allow for future ease of
extension.

There are three phases in the design. Read about that in the file itself.

Structure inclusion is used as a means of single inheritance.


Status
======

The replacement code is located in the java-class-file.lisp file.

TODO:

 * All methods preceded by an exclamation mark have equal names in
   compiler-pass2; this situation is to be resolved eventually.
   Preferrably even before merging back to trunk.

 * Move 'code-bytes' to opcodes.lisp

 * Rename opcodes.lisp to jvm-opcodes.lisp [probably more an action for trunk/]

 * Writing unit-tests

 * Write compiler-pass2.lisp to use WITH-CODE-TO-METHOD to select the
   method to send output to

 * 


The rest of the status is still to be described.

