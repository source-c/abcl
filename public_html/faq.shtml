<?xml version="1.0"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <title>FAQ: ABCL - Common Lisp on the JVM</title>
  <link rel="stylesheet" type="text/css" href="style.css" />
  <link rel="stylesheet" type="text/css" href="faq-style.css" />
  <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1" />
</head>

<body>
 <div id="title" class="header">
   <h1>FAQ: ABCL - Common Lisp on the JVM</h1>
 </div>

<!--#include virtual="left-menu" -->

<div style="margin-left:auto;margin-right:auto;width:20cm">
<h1>Frequently Asked Questions about Armed Bear Common Lisp</h1>
<ol id="toc">
  <li class="topic"><a href="#general">General Questions about ABCL</a>
    <ol>
      <li class="question"><a href="#what">What is ABCL?</a></li>
      <li class="question"><a href="#license">What license is used for ABCL?</a></li>
      <li class="question"><a href="#bug-reporting">How/Where should I report bugs?</a></li>
      <li class="question"><a href="#speed">Is ABCL faster or slower than implementation XYZ?</a></li>
      <li class="question"><a href="#qa">What is the quality of the implementation? How can you tell?</a></li>
      <li class="question"><a href="#repository">Where is ABCL's source code repository?</a></li>
      <li class="question"><a href="#documentation">Where is ABCL's documentation?</a></li>
    </ol>
  </li> 

  <li class="topic"><a href="#building">Questions about Building ABCL</a>
    <ol>
      <li class="question"><a href="#avoiding-recompilation">The Ant build process seems to recompile from scratch each time.  How do I avoid this?</a></li>
    </ol>
  </li> 

  <li class="topic"><a href="#running">Questions about Running ABCL</a>
  <ol>
    <li class="question">
      <a href="#maxpermgen-errors">Java is running out of memory
      with an error reporting something about
      "java.lang.OutOfMemoryError: PermGen space".  What can I
      do?</a>
    </li>
    <li class="question">
      <a href="#dotabclrc">What's the name of the startup configuration file?</a>
    </li>
  </ol>
  </li> 
</ol>

<div class="h2" title="general" id="general">
<h2 class="topic">General</h2>

<div class="h3" title="what" id="what">
<h3 class="question">What is ABCL?</h3>
<p>ABCL stands for Armed Bear Common Lisp.  ABCL is an implementation
of Common Lisp hosted on the <a href="http://en.wikipedia.org/wiki/Java_virtual_machine">Java Virtual Machine</a>.  With the release of <a
href="http://lisp.not.org/project/armedbear/#downloads">abcl-1.0</a>,
Armed Bear Common Lisp is a conforming implementation of the
<a href="ftp://ftp1.ansi.org/cust_serv/td_10-25-10/ANSI%2BINCITS%2B226-1994%2B(R2004).pdf">ANSI Common Lisp specification</a>.  The required statement of conformance
is included in the <a href="#user-manual">User Manual</a>.</p>

<p>
With the release of version 1.1.0, ABCL now contains a complete
implementation of <a
href="http://www.lisp.org/mop/index.html">AMOP</a>.
</p>
</div>


<div class="h3" title="license" id="license">
<h3 class="question">What license is used for ABCL?</h3>

<p>ABCL is distributed under the <a href="http://www.gnu.org/copyleft/gpl.html">GNU General Public License</a> with <a
href="http://www.gnu.org/software/classpath/license.html">Classpath
exception</a>. This is the same license as used for JAVA SE and GNU Classpath.</p>

<p>Basically this means you can use ABCL from your application without the
need to make your own application open source.</p>

<p>
In general, such usage means that whenever you keep ABCL as a separate
jar file, you won't have licensing problems. The combining in the
Classpath exception means that you can
</p>
<ol>
<li>Extend ABCL java classes in your program</li>
<li>Use ABCL java classes in your program</li>
<li>Invoke ABCL lisp functions in your program</li>
</ol>
<p>
without having to worry about the licensing. You do have to
distribute the source code of ABCL (including modifications) 
if you distribute ABCL, but otherwise the license of ABCL is not viral.
</p>
</div>

<div class="h3" title="bug-reporting" id="bug-reporting">
<h3 class="question">How/Where should I report bugs?</h3>

<p>
The current state of issues can be found in the <a
href="http://lisp.not.org/trac/armedbear/report/1">ABCL issue
tracker</a>.  Individuals with an <a
href="http://en.wikipedia.org/wiki/Openid">OpenID</a> such as a Google
ID may enter information directly in the bug tracker after
authenticating by your provider. </p>

<p>

Alternatively, to report a bug, please mail a description of the
problem, the version of ABCL you are using, and if possible a set of
steps to reproduce the problem to the <a href="http://news.gmane.org/gmane.lisp.armedbear.devel">armedbear-devel
mailing list</a>.  We endeavor to respond within a day to messages.
</p>

<p>
Developers can also usually be found on the 
<a href="http://webchat.freenode.net/?randomnick=1&channels=abcl&prompt=1&uio=d4">#abcl irc channel</a>.
</p>

<div class="h3" title="speed" id="speed">
<h3 class="question">Is ABCL faster or slower than implementation XYZ?</h3>

<p>General comparisons are hard to make, the relative speeds depend
on a lot of factors. For example timing outcomes of specific bits
of Java may have different timings depending on the settings of
the HotSpot JIT compiler (if the tests are run on Sun).</p>

<p>Some statements can be made in general though. Due to the fact that
ABCL has been implemented in Java, it inherits some of the aspects of
Java itself as well as the fact that it can't directly manipulate
CPU content. Implementations such as SBCL and Closure CL can do that and
take that to their advantage: for example in SBCL a boxed fixnum is a
direct register value, while in ABCL it's encapsulated in an object.</p>

<p>On the other hand, ABCL - like SBCL - supports unboxed fixnums. ABCL's
fixnums support the full 32 bit range of integer values, while SBCL due
to its boxing strategy can only use 29 bit integers (on 32bit platforms).</p>

<p>Given ABCL's age - a young project by Lisp standards - there is also
plenty of room for improvement in the area of execution speed and optimization.
The project welcomes initiatives to improve performance.</p>
</div>


<div class="h3" title="qa" id="qa">
<h3 class="question">What is the quality of the implementation? How can you tell?</h3>

<p>The project recognizes there are several dimensions to quality:</p>
<ol>
<li> The level of compliance to the standard </li>
<li> The level of 'usability': whether (or not) the application is able
  to run existing Lisp code</li>
</ol>

<p>
The plan is to ensure that ABCL runs with the software provided by
<a href="http://www.quicklisp.org/">Quicklisp</a>.  For many packages available from Quicklisp,
this is already the case.
</p>

<p>The first item is being measured by running the ANSI test suite compliance
  tests. The second item is measured by compiling and running the test suite
  in the <a href="http://maxima.sourceforge.net/">Maxima application</a>.
  Additionally, compilation of <a href="http://ap5.com/">AP5</a> is used to
  improve this measure too.</p>

<p>ABCL 1.1.1 fails roughly 12 out of 21702 tests in the ANSI test
suite in interpreted and compiled modes, a constant number over the
past releases.</p>

<p>As a measure of 'improvement achieved', the development team refers
  to the number of failing tests in the Maxima test suite too.
  ABCL 0.23.0 is able to run the test suite without failures, coming from
  'only' ca 75 failing tests at the time of 0.15.0, and even 1400 failures
  around October 2008.</p>
</div>

<div class="h3" title="repository" id="repository">
<h3 class="question">Where is ABCL's source code repository?</h3>

<p>The source code may be viewed with a web browser by visiting  <a
href="http://lisp.not.org/trac/armedbear/browser/trunk/abcl/">http://lisp.not.org/trac/armedbear/browser/trunk/abcl/</a>.
</p>

<p>If you want to build the source, ABCL trunk,
can be checked out via <a href="http://subversion.apache.org/">Subversion (aka "svn")</a> from
the URI 
<a href="http://abcl.org/svn/trunk/abcl/">http://abcl.org/svn/trunk/abcl/</a>.</p>

</div>

<div class="h3" title="documentation" id="documentation">
<h3 class="question">Where is ABCL's documentation?</h3>

<p>Documentation on ABCL can be found in several places, depending on the
  kind of documentation you're looking for.</p>

<ol>
  <li id="user-manual">Users of the system are invited to start with the <a href="http://code.google.com/p/abcl-dynamic-install/downloads/detail?name=abcl-20130607a.pdf">Armed Bear Common Lisp User Manual</a></li>
  <li>Our <a href="http://lisp.not.org/trac/armedbear/wiki">wiki</a></li>
  <li>The <a href="http://lisp.not.org/trac/armedbear/browser">source
    code (JavaDoc and general comments)</a></li>
  <li>Specific <a href="http://lisp.not.org/trac/armedbear/browser/trunk/abcl/examples">examples</a></li>
</ol>
</div>

</div>

<div class="h2" title="Building" id="building">
<h2 class="topic">Building</h2>

<div class="h3" title="Avoiding recompilation" id="avoiding-recompilation">
<h3 class="question">The Ant build process seems to recompile from scratch each time.  How do I avoid this?</h3>

<p>
If the JVM system property <code>abcl.build.incremental</code> is set,
the Ant build process will attempt to build ABCL incrementally
by not removing any intermediate results.  The easiest way to enable
this property is to copy the 'abcl.properties.in' file to
'abcl.properties', then uncomment the line referencing the setting of
the <code>abcl.build.incremental</code> property.
</p>
</div>

</div>

<div class="h2" title="Running" id="running">
<h2 class="topic">Running</h2>

<div class="h3" title="Out of Memory errors" id="maxpermgen-errors">
<h3 class="question">Java is running out of memory with an error reporting something
about "java.lang.OutOfMemoryError: PermGen space".  What can I
do?</h3>

<p>
  You need to increase the memory which the Java allocates for
  permanent generation ("PermGen)" objects by using the appropriate
  switch on command line which invokes the JVM hosting ABCL.  When the
  implementation compiles or loads Lisp code, it creates a separate
  JVM class for each top-level form.  With large workloads, this can
  overrun the part of memory which Java reserves for storing the class
  definition which results in the error you are seeing.
</p>

<p>
  The exact manner of configuring this option unfortunately varies by
  Java implementation.  For the Oracle HotSpot 64bit JVM, something
  like <code>"-d64 -Xmx4g -XX:MaxPermSize=1g
  -XX:+CMSClassUnloadingEnabled"</code> will not only increase the
  PermGen space, but will ensure you always invoke the 64bit JVM,
  increase the maximum memory space available to the Java to 4GiB, and
  allow the garbage collection of class definitions which are deemed
  to be unused.
</p>

<p>
  If you are compiling ABCL from source, a handy way to have the build
  process incorporate such runtime flags in the JVM invocation would
  be to copy the <code>'abcl.properties.in'</code> file to
  <code>'abcl.properties'</code>, and then ensure that the
  <code>'java.options'</code> variable is set to the desired options.
</p>

<div class="h3" title="What is the name of the startup run control script?" id="dotabclrc">
<h3 class="question">Is there a file that customizes the startup of the ABCL process?</h3>

<p>
  The file <code>~/.abclrc</code> is loaded by the implementation if the <code>--noinit</code> flag is not specified.
</p>
</div>
</div>

</div>

</div>

<div style="float:left;width:100%">
 <hr />
 <p>Back to <a href="http://lisp.not.org/">lisp.not.org</a>.</p>

 <div class="check">
   <a href="http://validator.w3.org/check/referer">Valid XHTML 1.0 Strict</a>
 </div>
<div style="float:right;font-size:10px;font-family:monospace">$Id$</div>
</div>
</div>
</body>
</html>
