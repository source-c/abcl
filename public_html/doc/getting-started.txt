So now you have the ABCL Lisp system compiled, and can run the resulting JAR
file to give you a Lisp prompt, what do you do with it?

* First, get that JAR file onto a pendrive. You can take Lisp with you
	where-ever you go. Now how cool is that?
* Lisp IS NOT an artificial intelligence (AI) programming language. It IS a
	general purpose programming language, can can, as well, do AI stuff.
* Lisp is a refreshing alternative to the Fortran-like languages you see all
	around you (C, C++, Java, PHP, etc). Its syntax is weird and different,
	and very flexible (well to be honest Lisp doesn't really have any
	syntax, which is why it is so flexible).
* Start by trying to get into the Lisp way of programming. Try to write code
	in Lisp instead of your current programming language. For example, try
	to write Lisp versions of what you would do in Java.
* Lisp is a big language, but once you have learned a small element, the rest
	of the language will become obvious -- it has everything you need. As
	your knowledge grows, so you will see there is an answer in Lisp. (This
	is just like Java or C++, once you know the basics you can simply write
	your own, or hunt down the ready-made solutions that the language has
	-- somewhere.
* Lisp is very flexible. You won't see this until you've been using it awhile,
	but you will find that it is the most natural way to think through
	solutions.
* There are lots of Lisp textbooks around. Don't be worried if these are 20
	years old or more. You will still say 'wow' when you see what sort of
	things are in these books. The things you can do with functions is
	amazing -- but you don't know this because your current languages don't
	support it, so you don't think that way.
* Finally, write Lisp code. Everytime you have to solve a problem in Java or
	C++, think about how you could do it in Lisp.

Java/Lisp examples.

-------------------------------------------------------------------------------
Count to 10:
Java

	for(i = 1; i < 11; i++) {
		System.out.println("i=" + i);
	}

Lisp

	(dotimes (x 10)
		(print (1+ x)))

-------------------------------------------------------------------------------

